{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>The zOS Rexx Executor can run REXX statements provided in a dataset or in the plugin step.</p> <p>Apart from executing a REXX program, this plug-in provides ability to create output properties.</p>"},{"location":"#compatibility","title":"Compatibility","text":"<p>The plug-in is compatible with:</p> <ul> <li>UrbanCode Deploy version 7.0.0 or later</li> <li>UrbanCode Deploy agents on z/OS</li> <li>IBM z/OS version 2.1 or later</li> <li>IBM Java 8 or 11</li> </ul>"},{"location":"#available-steps","title":"Available Steps","text":"<ul> <li>Execute a REXX program</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>No special steps are required for installation. See Installing plug-ins in UrbanCode products.</p>"},{"location":"#history","title":"History","text":""},{"location":"#version-2","title":"Version 2","text":"<ul> <li>Added new checkbox input to show debug logs in case of any unknown failure.</li> <li>Output will now show the elapsed time of the REXX program</li> <li>New output property RexxReturnCode will store the return code of the REXX program</li> <li>Fixes output buffer issue when output has too much data</li> <li>Arguments can now be as big as 248 characters</li> <li>Fixed issue with work directory during two or more parallel step execution</li> <li>Minor improvements in temporary directory creation</li> <li>Fixed handling of CLIST error message response from ISPF Gateway</li> <li>Changes to run process in Legacy ISPF Gateway</li> <li>Improvements in ISPF gateway error handling</li> <li>Fixed PH62152 - RcException while allocating temporary datasets</li> </ul>"},{"location":"#version-1","title":"Version 1","text":"<ul> <li>Initial release</li> </ul>"},{"location":"downloads/","title":"Downloads","text":"<ul> <li>ucd-plugins-zos-rexx-2.1168947.zip</li> <li>ucd-plugins-zos-rexx-2.1168604.zip</li> <li>ucd-plugins-zos-rexx-2.1164401.zip</li> <li>ucd-plugins-zos-rexx-2.1164307.zip</li> <li>ucd-plugins-zos-rexx-2.1161998.zip</li> <li>ucd-plugins-zos-rexx-2.1161121.zip</li> <li>ucd-plugins-zos-rexx-2.1161042.zip</li> <li>ucd-plugins-zos-rexx-2.1159387.zip</li> <li>ucd-plugins-zos-rexx-2.1158244.zip</li> <li>ucd-plugins-zos-rexx-2.1154680.zip</li> <li>ucd-plugins-zos-rexx-1.1152822.zip</li> </ul>"},{"location":"steps/","title":"Steps","text":""},{"location":"steps/#process-steps-in-the-zos-rexx-executor-plug-in","title":"Process steps in the z/OS Rexx Executor plug-in","text":""},{"location":"steps/#execute-a-rexx-program","title":"Execute a REXX program","text":"<p>Use this step to execute rexx program</p> Name Type Description Required Source Type Enumeration: INLINE / DATASET Source of REXX program Yes Source Value String Text or PDS member or Sequential Dataset that has REXX program. If the single quotation marks are omitted, the user's data set prefix from the TSO profile is prefixed to the front of the data set name. Yes Arguments String Specify the arguments(without quotes) to the REXX program No SYSPROC Datasets String Specify fully qualified SYSPROC datasets that the INPUT REXX program may use No"},{"location":"usage/","title":"Usage","text":"<p>The z/OS Rexx Executor plug-in will execute statements provided in a dataset or inline in the plugin step.</p> <p>Select Source type as DATASET from the drop-down and  enter the dataset in the Source Value.  Fully qualified dataset needs to be enclosed in single quotes. When the quotes are omitted then, the TSO prefix of the id running the  plugin step is prefixed to the Source Dataset.</p> <p>(or)</p> <p>Select Source type as INLINE from the drop-down and  then in the Source Value enter REXX statements beginning with a /* REXX */ statement.</p> <p>Arguments can be passed to the REXX program with/without quotes.  However, if there are more than one argument then arguments must be separated by a space.</p> <p>The SYSPROC field allows user to pass datasets containing REXX programs  that will be used by the REXX program run by the plugin step.  Multiple SYSPROC datasets can be passed by separating datasets by a comma(,).</p>"},{"location":"usage/#setting-output-property","title":"Setting output property","text":"<p>This plugin allows user to set output properties from the REXX program and  later to be used in successive steps of a process.  A user REXX program can simply invoke a call to SETPROP with two arguments.</p> <p>The first argument is output property name and  the second argument is the property value.</p> <p>CALL SETPROP propertyName propertyValue</p> <p>For example, below REXX snippet will set an output property currentDate with value of date variable</p> <pre><code>/* REXX */\ndate = DATE('S')  /* Returns date in YYYYMMDD format E.g., 20120327 */\nCALL SETPROP \"currentDate\" date\n</code></pre>"},{"location":"usage/#setting-multi-line-output-property","title":"Setting multi-line output property","text":"<p>To set a multi-line output property, the lines of the property value must be separated  by a delimiter returned by inbuilt program GETDLMTR </p> <pre><code>/* REXX */\ndelimiter = GETDLMTR() /* Return delimiter to separate lines */\nlines = \"This is first line\" || delimiter || \"This is second line\"  \nCALL SETPROP \"outputLines\" lines\n</code></pre> <p>Will set property outputLines to below value</p> <pre><code>This is first line\nThis is second line\n</code></pre>"},{"location":"usage/#referring-properties-from-successive-steps","title":"Referring properties from successive steps","text":"<p>If the rexx step name is Run-Rexx-Program and output property name is currentDate then the output properties can be referred by the successive steps as below</p> <p>${p:Run-Rexx-Program/currentDate}</p> <p>Note</p> <p>From plugin version 2, an output property RexxReturnCode will store the return/exit code from REXX program.</p>"}]}